[
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "Report Generator",
    "section": "",
    "text": "source\n\ncheck_project\n\n check_project (nbs_path:Optional[pathlib.Path]=None)\n\nCheck all exported definitions in a project for docments compliance\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnbs_path\nOptional\nNone\nPath to notebooks directory\n\n\nReturns\nList\n\nList of check results for all definitions\n\n\n\n\nsource\n\n\ngenerate_text_report\n\n generate_text_report\n                       (results:List[cjm_nbdev_docments.core.DocmentsCheck\n                       Result], verbose:bool=False)\n\nGenerate a human-readable text report of compliance results\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nresults\nList\n\nCheck results from check_project\n\n\nverbose\nbool\nFalse\nInclude detailed information\n\n\nReturns\nstr\n\nFormatted text report\n\n\n\n\nsource\n\n\ngenerate_json_report\n\n generate_json_report\n                       (results:List[cjm_nbdev_docments.core.DocmentsCheck\n                       Result])\n\nGenerate a JSON report of compliance results\n\n\n\n\nType\nDetails\n\n\n\n\nresults\nList\nCheck results from check_project\n\n\nReturns\nDict\nJSON-serializable report data\n\n\n\n\n# Test the report generator\nresults = check_project()\nprint(generate_text_report(results, verbose=True))\n\n📚 Docments Compliance Report\n==================================================\nTotal definitions: 58\n✅ Compliant: 58\n❌ Non-compliant: 0\n⚠️  With TODO placeholders: 5\n\n\n⚠️  Definitions with TODO placeholders:\n------------------------------\n\n📓 03_autofix.ipynb:\n  ⚠️  needs_fixing (1 TODOs)\n  ⚠️  get_param_name (2 TODOs)\n  ⚠️  needs_param_fix (2 TODOs)\n\n📓 04_cli.ipynb:\n  ⚠️  create_parser (1 TODOs)\n  ⚠️  output_report (1 TODOs)\n\n✅ Compliant definitions:\n------------------------------\n\n📓 00_core.ipynb:\n  ✅ DocmentsCheckResult\n  ✅ __post_init__\n  ✅ extract_param_docs_from_func\n  ✅ extract_param_docs\n  ✅ check_return_doc\n  ✅ count_todos_in_docs\n  ✅ check_has_docstring_from_func\n  ✅ check_has_docstring\n  ✅ check_type_hints\n  ✅ check_params_documentation\n  ✅ determine_compliance\n  ✅ check_definition\n  ✅ check_notebook\n  ✅ check_function\n\n📓 01_scanner.ipynb:\n  ✅ get_export_cells\n  ✅ extract_definitions\n  ✅ scan_notebook\n  ✅ scan_project\n\n📓 02_report.ipynb:\n  ✅ check_project\n  ✅ _generate_summary_stats\n  ✅ _generate_non_compliant_section\n  ✅ _generate_todos_section\n  ✅ _generate_compliant_section\n  ✅ generate_text_report\n  ✅ generate_json_report\n\n📓 03_autofix.ipynb:\n  ✅ find_signature_boundaries\n  ✅ split_parameters\n  ✅ parse_single_line_signature\n  ✅ generate_param_todo_comment\n  ✅ generate_return_todo_comment\n  ✅ build_fixed_single_line_function\n  ✅ fix_multi_line_signature\n  ✅ fix_class_definition\n  ✅ insert_function_docstring\n  ✅ fix_single_line_function\n  ✅ fix_multi_line_function\n  ✅ generate_fixed_source\n  ✅ fix_notebook\n  ✅ DocstringInfo\n  ✅ detect_docstring_style\n  ✅ parse_google_docstring\n  ✅ parse_numpy_docstring\n  ✅ parse_sphinx_docstring\n  ✅ extract_docstring_info\n  ✅ convert_to_docments_format\n  ✅ convert_single_line_to_docments\n  ✅ convert_multiline_to_docments\n  ✅ replace_docstring_in_body\n  ✅ generate_fixed_source_with_conversion\n  ✅ fix_notebook_with_conversion\n\n📓 04_cli.ipynb:\n  ✅ handle_autofix\n  ✅ generate_report\n  ✅ main\n\n\n\n# Test JSON report\njson_report = generate_json_report(results)\nprint(json.dumps(json_report, indent=2))\n\n{\n  \"summary\": {\n    \"total\": 58,\n    \"compliant\": 58,\n    \"non_compliant\": 0,\n    \"with_todos\": 5,\n    \"total_todos\": 7\n  },\n  \"by_notebook\": {\n    \"00_core.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"DocmentsCheckResult\",\n          \"type\": \"ClassDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": false,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"__post_init__\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_param_docs_from_func\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"func\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"func\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_param_docs\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_return_doc\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"count_todos_in_docs\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_has_docstring_from_func\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"func\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"func\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_has_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_type_hints\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"definition\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"definition\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_params_documentation\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"definition\": true,\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"definition\": true,\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"determine_compliance\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"has_docstring\": true,\n            \"params_documented\": true,\n            \"return_documented\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"has_docstring\": true,\n            \"params_documented\": true,\n            \"return_documented\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_definition\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"definition\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"definition\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_notebook\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"func\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"func\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": []\n    },\n    \"03_autofix.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"needs_fixing\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"get_param_name\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_str\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_str\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"needs_param_fix\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"find_signature_boundaries\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"split_parameters\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"params_str\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"params_str\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_single_line_signature\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"sig_line\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"sig_line\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_param_todo_comment\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_name\": true,\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"param_name\": true,\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_return_todo_comment\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"build_fixed_single_line_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"parsed\": true,\n            \"params\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"parsed\": true,\n            \"params\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_multi_line_signature\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_class_definition\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"insert_function_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"indent\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"indent\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_single_line_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_multi_line_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_fixed_source\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_notebook\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true,\n            \"dry_run\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true,\n            \"dry_run\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"DocstringInfo\",\n          \"type\": \"ClassDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": false,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"detect_docstring_style\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_google_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_numpy_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_sphinx_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_docstring_info\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"convert_to_docments_format\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"convert_single_line_to_docments\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"sig_line\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"sig_line\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"convert_multiline_to_docments\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"sig_lines\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"sig_lines\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"replace_docstring_in_body\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"body_lines\": true,\n            \"description\": true,\n            \"def_line\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"body_lines\": true,\n            \"description\": true,\n            \"def_line\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_fixed_source_with_conversion\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_notebook_with_conversion\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true,\n            \"dry_run\": true,\n            \"convert_docstrings\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true,\n            \"dry_run\": true,\n            \"convert_docstrings\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": [\n        {\n          \"name\": \"needs_fixing\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"get_param_name\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_str\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_str\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"needs_param_fix\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ]\n    },\n    \"01_scanner.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"get_export_cells\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_definitions\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"scan_notebook\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true,\n            \"nbs_root\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true,\n            \"nbs_root\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"scan_project\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nbs_path\": true,\n            \"pattern\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nbs_path\": true,\n            \"pattern\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": []\n    },\n    \"04_cli.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"create_parser\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"handle_autofix\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"args\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"args\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"format\": true,\n            \"verbose\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"format\": true,\n            \"verbose\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"output_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"main\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"args\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"args\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": [\n        {\n          \"name\": \"create_parser\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"output_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ]\n    },\n    \"02_report.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"check_project\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nbs_path\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nbs_path\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_summary_stats\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_non_compliant_section\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_todos_section\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_compliant_section\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_text_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"verbose\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"verbose\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_json_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": []\n    }\n  }\n}\n\n\n\n# Test TODO tracking with a function that has placeholder docs\nfrom cjm_nbdev_docments.core import check_definition\n\ntest_with_todos = '''def example_func(\n    x: int,  # TODO: Add description\n    y: str  # TODO: Add description  \n) -&gt; bool:  # TODO: Add return description\n    \"TODO: Add function description\"\n    return True'''\n\ntest_def = {\n    'name': 'example_func',\n    'type': 'FunctionDef', \n    'source': test_with_todos,\n    'notebook': 'test.ipynb',\n    'args': [\n        {'name': 'x', 'annotation': 'int'},\n        {'name': 'y', 'annotation': 'str'}\n    ],\n    'returns': 'bool'\n}\n\nresult = check_definition(test_def)\nprint(f\"Function: {result.name}\")\nprint(f\"Compliant: {result.is_compliant}\")\nprint(f\"Has TODOs: {result.has_todos}\")\nprint(f\"TODO count: {result.todo_count}\")\n\n# Test current project report\nprint(\"\\n\" + \"=\"*50)\nprint(\"Current project with TODO tracking:\")\nresults = check_project()\nprint(generate_text_report(results))\n\nFunction: example_func\nCompliant: True\nHas TODOs: True\nTODO count: 4\n\n==================================================\nCurrent project with TODO tracking:\n📚 Docments Compliance Report\n==================================================\nTotal definitions: 59\n✅ Compliant: 58\n❌ Non-compliant: 1\n\n❌ Non-compliant definitions:\n------------------------------\n\n📓 cli.ipynb:\n  ❌ output_report\n     - Missing docs for: return",
    "crumbs": [
      "Report Generator"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-nbdev-docments",
    "section": "",
    "text": "pip install cjm-nbdev-docments",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-nbdev-docments",
    "section": "",
    "text": "pip install cjm-nbdev-docments",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "cjm-nbdev-docments",
    "section": "Overview",
    "text": "Overview\ncjm-nbdev-docments helps nbdev users adopt and maintain the fastcore.docments documentation style. Instead of traditional docstrings, docments uses inline parameter documentation, making code more concise and readable.\n\nWhat is docments style?\nInstead of this:\ndef add(x, y):\n    \"\"\"Add two numbers.\n    \n    Args:\n        x: First number\n        y: Second number\n        \n    Returns:\n        Sum of x and y\n    \"\"\"\n    return x + y\nDocments style looks like this:\ndef add(\n    x: int,  # First number\n    y: int   # Second number  \n) -&gt; int:  # Sum of x and y\n    \"Add two numbers\"\n    return x + y\n\n\nKey Features\n\n🔍 Comprehensive Scanning: Automatically scans all exported functions and classes in your nbdev notebooks\n✅ Compliance Checking: Verifies that all parameters and return values have proper documentation\n📊 Detailed Reports: Generate text or JSON reports showing compliance status\n🔧 Auto-fix Support: Automatically add TODO placeholders for missing documentation\n🔄 Docstring Conversion: Convert existing Google/NumPy/Sphinx style docstrings to docments format\n💻 CLI Interface: Easy-to-use command-line tool integrated with nbdev workflow",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "cjm-nbdev-docments",
    "section": "Installation",
    "text": "Installation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/cj-mills/cjm-nbdev-docments.git\nor from conda\n$ conda install -c cj-mills cjm_nbdev_docments\nor from pypi\n$ pip install cjm_nbdev_docments",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#quick-start",
    "href": "index.html#quick-start",
    "title": "cjm-nbdev-docments",
    "section": "Quick Start",
    "text": "Quick Start\n\nBasic Usage\nCheck your nbdev project for documentation compliance:\n# Check all notebooks in your project\nnbdev-docments\n\n# Get detailed report including compliant functions\nnbdev-docments --verbose\n\n# Save report to a file\nnbdev-docments --output compliance-report.txt\n\n\nAuto-fixing Non-compliant Code\nAutomatically add TODO placeholders for missing documentation:\n# Preview what would be fixed\nnbdev-docments --fix --dry-run\n\n# Apply fixes\nnbdev-docments --fix\n\n\nConverting Existing Docstrings\nConvert traditional docstrings to docments format:\n# Convert Google/NumPy/Sphinx style docstrings\nnbdev-docments --fix --convert-docstrings",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#detailed-usage-examples",
    "href": "index.html#detailed-usage-examples",
    "title": "cjm-nbdev-docments",
    "section": "Detailed Usage Examples",
    "text": "Detailed Usage Examples\n\nChecking a Single Function\nYou can check individual functions for compliance:\nfrom cjm_nbdev_docments.core import check_function\n\ndef example_func(x, y):\n    return x + y\n\ncheck_function(example_func)\n\n\nChecking a Specific Notebook\nCheck a single notebook file:\nfrom cjm_nbdev_docments.core import check_notebook\n\ncheck_notebook(\"00_core.ipynb\")\n\n\nProgrammatic Usage\nFor integration into your own tools:\nfrom cjm_nbdev_docments.report import check_project, generate_json_report\n\n# Check entire project\nresults = check_project()\n\n# Generate JSON report\nreport = generate_json_report(results)\n\n# Process results programmatically\nfor notebook, data in report['by_notebook'].items():\n    print(f\"{notebook}: {len(data['non_compliant'])} issues\")",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#what-gets-checked",
    "href": "index.html#what-gets-checked",
    "title": "cjm-nbdev-docments",
    "section": "What Gets Checked?",
    "text": "What Gets Checked?\nThe tool checks for:\n\nFunction/Method Documentation:\n\nPresence of a docstring\nDocumentation for each parameter (except self)\nDocumentation for return values (when return type is annotated)\n\nType Hints:\n\nMissing type annotations for parameters\nMissing return type annotations\n\nClass Documentation:\n\nPresence of class docstrings\n\nTODO Tracking:\n\nIdentifies documentation with TODO placeholders\nHelps track documentation debt",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-nbdev-docments",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n├── autofix.ipynb # Automatically add placeholder documentation to non-compliant functions\n├── cli.ipynb     # Command-line interface for docments compliance checking\n├── core.ipynb    # Core functionality for checking docments compliance\n├── report.ipynb  # Generate compliance reports for docments validation\n└── scanner.ipynb # Scan nbdev notebooks for exported functions and classes\nTotal: 5 notebooks",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-nbdev-docments",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    autofix[autofix&lt;br/&gt;Auto-Fix]\n    cli[cli&lt;br/&gt;CLI Interface]\n    core[core&lt;br/&gt;Core]\n    report[report&lt;br/&gt;Report Generator]\n    scanner[scanner&lt;br/&gt;Scanner]\n\n    autofix --&gt; core\n    autofix --&gt; scanner\n    cli --&gt; report\n    report --&gt; core\n    report --&gt; scanner\n5 cross-module dependencies detected",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-nbdev-docments",
    "section": "CLI Reference",
    "text": "CLI Reference\n\nnbdev-docments Command\nusage: nbdev-docments [-h] [--nbs-path NBS_PATH] [--format {text,json}]\n                      [--output OUTPUT] [--verbose] [--quiet] [--todos-only]\n                      [--fix] [--convert-docstrings] [--dry-run]\n\nCheck nbdev project for docments compliance\n\noptions:\n  -h, --help            show this help message and exit\n  --nbs-path NBS_PATH   Path to notebooks directory (defaults to nbdev config)\n  --format {text,json}  Output format (default: text)\n  --output OUTPUT, -o OUTPUT\n                        Save report to file instead of printing\n  --verbose, -v         Show compliant definitions in text report\n  --quiet, -q           Only show summary (exit code indicates compliance)\n  --todos-only          Show only functions with TODO placeholders\n  --fix                 Auto-fix non-compliant functions by adding placeholder\n                        docs\n  --convert-docstrings  Convert existing Google/NumPy/Sphinx docstrings to\n                        docments format (use with --fix)\n  --dry-run             Show what would be fixed without making changes\n\nExamples:\n  # Check current project\n  nbdev-docments\n  \n  # Check specific notebooks directory\n  nbdev-docments --nbs-path ./notebooks\n  \n  # Generate JSON report\n  nbdev-docments --format json\n  \n  # Save report to file\n  nbdev-docments --output report.txt\n  \n  # Show all definitions (including compliant ones)\n  nbdev-docments --verbose\n  \n  # Show only functions with TODO placeholders\n  nbdev-docments --todos-only\n  \n  # Auto-fix non-compliant functions\n  nbdev-docments --fix\n  \n  # Auto-fix with docstring conversion\n  nbdev-docments --fix --convert-docstrings\n  \n  # Preview fixes without applying\n  nbdev-docments --fix --dry-run\n\nFor detailed help on any command, use nbdev-docments &lt;command&gt; --help.",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-nbdev-docments",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\nAuto-Fix (autofix.ipynb)\n\nAutomatically add placeholder documentation to non-compliant functions\n\n\nImport\nfrom cjm_nbdev_docments.autofix import (\n    find_signature_boundaries,\n    split_parameters,\n    parse_single_line_signature,\n    generate_param_todo_comment,\n    generate_return_todo_comment,\n    build_fixed_single_line_function,\n    fix_multi_line_signature,\n    fix_class_definition,\n    insert_function_docstring,\n    fix_single_line_function,\n    fix_multi_line_function,\n    generate_fixed_source,\n    fix_notebook,\n    DocstringInfo,\n    detect_docstring_style,\n    parse_google_docstring,\n    parse_numpy_docstring,\n    parse_sphinx_docstring,\n    extract_docstring_info,\n    convert_to_docments_format,\n    convert_single_line_to_docments,\n    convert_multiline_to_docments,\n    replace_docstring_in_body,\n    generate_fixed_source_with_conversion,\n    fix_notebook_with_conversion\n)\n\n\nFunctions\n@patch\ndef needs_fixing(\n    self: DocmentsCheckResult\n) -&gt; bool:  # Whether the definition needs fixing\n    \"Check if this definition needs any fixing\"\n@patch\ndef get_param_name(\n    self: DocmentsCheckResult,\n    param_str: str  # Parameter string (e.g., \"x: int\" or \"y=10\")\n) -&gt; str:  # Extracted parameter name\n    \"Extract parameter name from a parameter string\"\n@patch\ndef needs_param_fix(\n    self: DocmentsCheckResult,\n    param_name: str  # Name of the parameter to check\n) -&gt; bool:  # Whether the parameter needs fixing\n    \"Check if a parameter needs documentation or type hint fixes\"\ndef find_signature_boundaries(\n    lines: List[str]  # Source code lines\n) -&gt; tuple[int, int]:  # (def_line_idx, sig_end_idx) or (-1, -1) if not found\n    \"Find the start and end lines of a function signature\"\ndef split_parameters(\n    params_str: str  # Parameter string from function signature\n) -&gt; List[str]:  # List of individual parameter strings\n    \"Split a parameter string into individual parameters, handling nested types\"\ndef parse_single_line_signature(\n    sig_line: str  # Single-line function signature\n) -&gt; dict:  # Parsed components of the signature\n    \"Parse a single-line function signature into its components\"\ndef generate_param_todo_comment(\n    param_name: str,  # Parameter name\n    result: DocmentsCheckResult,  # Check result with type hint and doc info\n    existing_comment: str = \"\"  # Existing comment text (without #)\n) -&gt; str:  # TODO comment to add\n    \"Generate appropriate TODO comment for a parameter based on what's missing\"\ndef generate_return_todo_comment(\n    result: DocmentsCheckResult,  # Check result with type hint and doc info\n    existing_comment: str = \"\"  # Existing comment text (without #)\n) -&gt; str:  # TODO comment to add\n    \"Generate appropriate TODO comment for return value based on what's missing\"\ndef build_fixed_single_line_function(\n    parsed: dict,  # Parsed signature components\n    params: List[str],  # Individual parameter strings\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; List[str]:  # Lines of fixed function signature\n    \"Build a fixed single-line function with documentation comments\"\ndef fix_multi_line_signature(\n    lines: List[str],  # All source lines\n    def_line_idx: int,  # Start of function definition\n    sig_end_idx: int,  # End of function signature\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; List[str]:  # Fixed lines for the signature portion\n    \"Fix a multi-line function signature by adding parameter comments\"\ndef fix_class_definition(\n    result: DocmentsCheckResult  # Check result with non-compliant class\n) -&gt; str:  # Fixed source code with class docstring\n    \"Fix a class definition by adding a docstring if missing\"\ndef insert_function_docstring(\n    lines: List[str],  # Fixed function lines\n    def_line_idx: int,  # Index of function definition line\n    indent: str  # Base indentation for the function\n) -&gt; List[str]:  # Lines with docstring inserted\n    \"Insert a TODO docstring after the function signature\"\ndef fix_single_line_function(\n    lines: List[str],  # All source lines\n    def_line_idx: int,  # Index of function definition line\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; List[str]:  # Fixed lines for the function\n    \"Fix a single-line function signature by converting to multi-line with parameter comments\"\ndef fix_multi_line_function(\n    lines: List[str],  # All source lines\n    def_line_idx: int,  # Start of function definition\n    sig_end_idx: int,  # End of function signature\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; List[str]:  # Fixed lines for the function\n    \"Fix a multi-line function signature by adding parameter comments\"\ndef generate_fixed_source(\n    result: DocmentsCheckResult  # Check result with non-compliant function\n) -&gt; str:  # Fixed source code with placeholder documentation\n    \"Generate fixed source code for a non-compliant function or class\"\ndef fix_notebook(\n    nb_path: Path,  # Path to notebook to fix\n    dry_run: bool = False  # If True, show changes without saving\n) -&gt; Dict[str, Any]:  # Summary of changes made\n    \"Fix non-compliant functions in a notebook by adding placeholder documentation\"\ndef detect_docstring_style(\n    docstring: str  # Docstring text to analyze\n) -&gt; str:  # Detected style: 'google', 'numpy', 'sphinx', 'docments', or 'unknown'\n    \"Detect the style of a docstring\"\ndef parse_google_docstring(\n    docstring: str  # Google-style docstring text\n) -&gt; DocstringInfo:  # Parsed docstring information\n    \"Parse a Google-style docstring\"\ndef parse_numpy_docstring(\n    docstring: str  # NumPy-style docstring text\n) -&gt; DocstringInfo:  # Parsed docstring information\n    \"Parse a NumPy-style docstring\"\ndef parse_sphinx_docstring(\n    docstring: str  # Sphinx-style docstring text\n) -&gt; DocstringInfo:  # Parsed docstring information\n    \"Parse a Sphinx-style docstring\"\ndef extract_docstring_info(\n    source: str,  # Function source code\n    name: str  # Function name\n) -&gt; Optional[DocstringInfo]:  # Extracted docstring information or None\n    \"Extract docstring information from function source code\"\ndef convert_to_docments_format(\n    source: str,  # Original function source code\n    docstring_info: DocstringInfo,  # Extracted docstring information\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; str:  # Converted source code in docments format\n    \"Convert function source to docments format using extracted docstring info\"\ndef convert_single_line_to_docments(\n    sig_line: str,  # Single-line function signature\n    docstring_info: DocstringInfo,  # Extracted docstring information\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; List[str]:  # Multi-line signature with docments comments\n    \"Convert single-line function signature to multi-line docments format\"\ndef convert_multiline_to_docments(\n    sig_lines: List[str],  # Multi-line function signature\n    docstring_info: DocstringInfo,  # Extracted docstring information\n    result: DocmentsCheckResult  # Check result with missing params info\n) -&gt; List[str]:  # Multi-line signature with docments comments\n    \"Convert multi-line function signature to docments format\"\ndef replace_docstring_in_body(\n    body_lines: List[str],  # Function body lines\n    description: str,  # New description to use\n    def_line: str  # Function definition line for indentation\n) -&gt; List[str]:  # Modified body lines\n    \"Replace the docstring in function body with a simple description\"\ndef generate_fixed_source_with_conversion(\n    result: DocmentsCheckResult  # Check result with non-compliant function\n) -&gt; str:  # Fixed source code with converted documentation\n    \"Generate fixed source code, converting existing docstrings to docments format if possible\"\ndef fix_notebook_with_conversion(\n    nb_path: Path,  # Path to notebook to fix\n    dry_run: bool = False,  # If True, show changes without saving\n    convert_docstrings: bool = True  # If True, convert existing docstrings to docments format\n) -&gt; Dict[str, Any]:  # Summary of changes made\n    \"Fix non-compliant functions in a notebook, optionally converting docstrings to docments format\"\n\n\nClasses\nclass DocstringInfo(NamedTuple):\n    \"Information extracted from a docstring\"\n\n\n\nCLI Interface (cli.ipynb)\n\nCommand-line interface for docments compliance checking\n\n\nImport\nfrom cjm_nbdev_docments.cli import (\n    create_parser,\n    handle_autofix,\n    generate_report,\n    output_report,\n    main\n)\n\n\nFunctions\ndef create_parser(\n) -&gt; argparse.ArgumentParser:  # Configured argument parser\n    \"Create and configure the argument parser for docments CLI\"\ndef handle_autofix(\n    args: argparse.Namespace  # Parsed command line arguments\n) -&gt; int:  # Exit code\n    \"Handle auto-fix mode for non-compliant functions\"\ndef generate_report(\n    results: list,  # Check results from check_project\n    format: str,  # Output format (\"text\" or \"json\")\n    verbose: bool = False  # Whether to show compliant definitions\n) -&gt; str:  # Generated report as string\n    \"Generate a report in the specified format\"\ndef output_report(\n    report: str,  # Report content to output\n    output_path: Optional[Path] = None,  # File path to save report to\n    quiet: bool = False  # Whether to suppress output\n) -&gt; None\n    \"Output the report to console or file\"\ndef main(\n    args: Optional[list] = None  # Command line arguments (for testing)\n) -&gt; int:  # Exit code (0 for success, 1 for non-compliance)\n    \"Main CLI entry point for docments checker\"\n\n\n\nCore (core.ipynb)\n\nCore functionality for checking docments compliance\n\n\nImport\nfrom cjm_nbdev_docments.core import (\n    DocmentsCheckResult,\n    extract_param_docs_from_func,\n    extract_param_docs,\n    check_return_doc,\n    count_todos_in_docs,\n    check_has_docstring_from_func,\n    check_has_docstring,\n    function_has_return_value,\n    check_type_hints,\n    check_params_documentation,\n    determine_compliance,\n    check_definition,\n    check_notebook,\n    check_function\n)\n\n\nFunctions\ndef extract_param_docs_from_func(\n    func: Callable    # Function object to extract docs from\n) -&gt; Dict[str, str]:  # Mapping of parameter names to their documentation\n    \"Extract parameter documentation from function object using fastcore.docments\"\ndef extract_param_docs(\n    source:str    # Function source code\n) -&gt; Dict[str, str]:  # Mapping of parameter names to their documentation\n    \"Extract parameter documentation from function source using docments style (fallback)\"\ndef check_return_doc(\n    source: str  # Function source code\n) -&gt; bool:  # Whether return is documented\n    \"Check if function has return documentation\"\ndef count_todos_in_docs(\n    source: str,  # Function/class source code\n    name: str  # Name of the function/class for AST parsing\n) -&gt; Tuple[int, bool]:  # (todo_count, has_todos)\n    \"Count TODO placeholders only in documentation (docstring, param docs, return docs)\"\ndef check_has_docstring_from_func(\n    func: Callable  # Function object to check\n) -&gt; bool:  # Whether the function has a docstring\n    \"Check if a function has a docstring using fastcore.docments\"\ndef check_has_docstring(\n    source: str,  # Function/class source code\n    name: str  # Name of the function/class\n) -&gt; bool:  # Whether the definition has a docstring\n    \"Check if a function/class has a docstring using AST parsing (fallback)\"\ndef function_has_return_value(\n    source: str,  # Function source code\n    name: str  # Function name\n) -&gt; bool:  # Whether function has explicit return statements with values\n    \"Check if a function actually returns a value (not just implicit None)\"\ndef check_type_hints(\n    definition: Dict[str, Any],  # Definition dict from scanner\n    source: Optional[str] = None  # Function source code (optional)\n) -&gt; Tuple[Dict[str, bool], List[str], bool]:  # (params_with_type_hints, missing_type_hints, return_has_type_hint)\n    \"Check which parameters and return value have type hints\"\ndef check_params_documentation(\n    definition: Dict[str, Any],  # Definition dict from scanner\n    source: str  # Function source code\n) -&gt; Tuple[Dict[str, bool], List[str], bool]:  # (params_documented, missing_params, return_documented)\n    \"Check parameter and return documentation for a function\"\ndef determine_compliance(\n    has_docstring: bool,  # Whether definition has a docstring\n    params_documented: Dict[str, bool],  # Which params have documentation\n    return_documented: bool  # Whether return is documented\n) -&gt; bool:  # Overall compliance status\n    \"Determine if a definition is compliant based on documentation checks\"\ndef check_definition(\n    definition: Dict[str, Any]  # Definition dict from scanner\n) -&gt; DocmentsCheckResult:  # Check result with compliance details\n    \"Check a function/class definition for docments compliance\"\ndef check_notebook(\n    nb_path: str  # Path to notebook file  \n) -&gt; None:  # Prints compliance report\n    \"Check a specific notebook for docments compliance\"\ndef check_function(\n    func:Callable          # Function object to check\n) -&gt; DocmentsCheckResult:  # Check result for the function\n    \"Check a single function for docments compliance\"\n\n\nClasses\n@dataclass\nclass DocmentsCheckResult:\n    \"Result of checking a function/class for docments compliance\"\n    \n    name: str  # Name of the function/class\n    type: str  # Type (FunctionDef, ClassDef, etc.)\n    notebook: str  # Source notebook\n    has_docstring: bool  # Whether it has a docstring\n    params_documented: Dict[str, bool]  # Which params have documentation\n    return_documented: bool  # Whether return is documented\n    missing_params: List[str]  # Parameters missing documentation\n    is_compliant: bool  # Overall compliance status\n    source: str  # Source code of the definition\n    has_todos: bool = False  # Whether it contains TODO placeholders\n    todo_count: int = 0  # Number of TODO placeholders found\n    params_with_type_hints: Dict[str, bool]  # Which params have type hints\n    return_has_type_hint: bool = False  # Whether return has type hint\n    params_missing_type_hints: List[str]  # Parameters missing type hints\n    \n\n\n\nReport Generator (report.ipynb)\n\nGenerate compliance reports for docments validation\n\n\nImport\nfrom cjm_nbdev_docments.report import (\n    check_project,\n    generate_text_report,\n    generate_json_report\n)\n\n\nFunctions\ndef check_project(\n    nbs_path: Optional[Path] = None  # Path to notebooks directory\n) -&gt; List[DocmentsCheckResult]:  # List of check results for all definitions\n    \"Check all exported definitions in a project for docments compliance\"\ndef _generate_summary_stats(\n    results: List[DocmentsCheckResult]  # Check results to summarize\n) -&gt; List[str]:  # Lines of summary statistics\n    \"Generate summary statistics section of the report\"\ndef _generate_non_compliant_section(\n    results: List[DocmentsCheckResult],  # Check results\n    by_notebook: Dict[str, List[DocmentsCheckResult]]  # Results grouped by notebook\n) -&gt; List[str]:  # Lines of non-compliant section\n    \"Generate non-compliant definitions section of the report\"\ndef _generate_todos_section(\n    results: List[DocmentsCheckResult],  # Check results\n    by_notebook: Dict[str, List[DocmentsCheckResult]]  # Results grouped by notebook\n) -&gt; List[str]:  # Lines of TODOs section\n    \"Generate TODO placeholders section of the report\"\ndef _generate_compliant_section(\n    results: List[DocmentsCheckResult],  # Check results\n    by_notebook: Dict[str, List[DocmentsCheckResult]]  # Results grouped by notebook\n) -&gt; List[str]:  # Lines of compliant section\n    \"Generate compliant definitions section of the report\"\ndef generate_text_report(\n    results: List[DocmentsCheckResult],  # Check results from check_project\n    verbose: bool = False  # Include detailed information\n) -&gt; str:  # Formatted text report\n    \"Generate a human-readable text report of compliance results\"\ndef generate_json_report(\n    results: List[DocmentsCheckResult]  # Check results from check_project\n) -&gt; Dict[str, Any]:  # JSON-serializable report data\n    \"Generate a JSON report of compliance results\"\n\n\n\nScanner (scanner.ipynb)\n\nScan nbdev notebooks for exported functions and classes\n\n\nImport\nfrom cjm_nbdev_docments.scanner import (\n    get_export_cells,\n    extract_definitions,\n    scan_notebook,\n    scan_project\n)\n\n\nFunctions\ndef get_export_cells(\n    nb_path: Path    # Path to the notebook file\n) -&gt; List[Dict[str, Any]]:  # List of cells with export directives\n    \"Extract all code cells from a notebook that have export directives\"\ndef extract_definitions(\n    source: str  # Python source code\n) -&gt; List[Dict[str, Any]]:  # List of function/class definitions with metadata\n    \"Extract function and class definitions from source code\"\ndef scan_notebook(\n    nb_path: Path,  # Path to the notebook to scan\n    nbs_root: Optional[Path] = None  # Root notebooks directory (for relative paths)\n) -&gt; List[Dict[str, Any]]:  # List of exported definitions with metadata\n    \"Scan a notebook and extract all exported function/class definitions\"\ndef scan_project(\n    nbs_path: Optional[Path] = None,  # Path to notebooks directory (defaults to config.nbs_path)\n    pattern: str = \"*.ipynb\"  # Pattern for notebook files to scan\n) -&gt; List[Dict[str, Any]]:  # All exported definitions found in the project\n    \"Scan all notebooks in a project for exported definitions\"",
    "crumbs": [
      "cjm-nbdev-docments"
    ]
  },
  {
    "objectID": "autofix.html",
    "href": "autofix.html",
    "title": "Auto-Fix",
    "section": "",
    "text": "DocmentsCheckResult.needs_fixing\n\n DocmentsCheckResult.needs_fixing ()\n\nCheck if this definition needs any fixing\n\n\n\nDocmentsCheckResult.get_param_name\n\n DocmentsCheckResult.get_param_name (param_str:str)\n\nExtract parameter name from a parameter string\n\n\n\n\nType\nDetails\n\n\n\n\nparam_str\nstr\nParameter string (e.g., “x: int” or “y=10”)\n\n\nReturns\nstr\nExtracted parameter name\n\n\n\n\n\n\nDocmentsCheckResult.needs_param_fix\n\n DocmentsCheckResult.needs_param_fix (param_name:str)\n\nCheck if a parameter needs documentation or type hint fixes\n\n\n\n\nType\nDetails\n\n\n\n\nparam_name\nstr\nName of the parameter to check\n\n\nReturns\nbool\nWhether the parameter needs fixing\n\n\n\n\n\n\nfind_signature_boundaries\n\n find_signature_boundaries (lines:List[str])\n\nFind the start and end lines of a function signature\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nList\nSource code lines\n\n\nReturns\ntuple\n(def_line_idx, sig_end_idx) or (-1, -1) if not found\n\n\n\n\n\n\nsplit_parameters\n\n split_parameters (params_str:str)\n\nSplit a parameter string into individual parameters, handling nested types\n\n\n\n\nType\nDetails\n\n\n\n\nparams_str\nstr\nParameter string from function signature\n\n\nReturns\nList\nList of individual parameter strings\n\n\n\n\n\n\nparse_single_line_signature\n\n parse_single_line_signature (sig_line:str)\n\nParse a single-line function signature into its components\n\n\n\n\nType\nDetails\n\n\n\n\nsig_line\nstr\nSingle-line function signature\n\n\nReturns\ndict\nParsed components of the signature\n\n\n\n\n\n\ngenerate_param_todo_comment\n\n generate_param_todo_comment (param_name:str,\n                              result:cjm_nbdev_docments.core.DocmentsCheck\n                              Result, existing_comment:str='')\n\nGenerate appropriate TODO comment for a parameter based on what’s missing\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nparam_name\nstr\n\nParameter name\n\n\nresult\nDocmentsCheckResult\n\nCheck result with type hint and doc info\n\n\nexisting_comment\nstr\n\nExisting comment text (without #)\n\n\nReturns\nstr\n\nTODO comment to add\n\n\n\n\n\n\ngenerate_return_todo_comment\n\n generate_return_todo_comment\n                               (result:cjm_nbdev_docments.core.DocmentsChe\n                               ckResult, existing_comment:str='')\n\nGenerate appropriate TODO comment for return value based on what’s missing\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nresult\nDocmentsCheckResult\n\nCheck result with type hint and doc info\n\n\nexisting_comment\nstr\n\nExisting comment text (without #)\n\n\nReturns\nstr\n\nTODO comment to add\n\n\n\n\n\n\nbuild_fixed_single_line_function\n\n build_fixed_single_line_function (parsed:dict, params:List[str],\n                                   result:cjm_nbdev_docments.core.Docments\n                                   CheckResult)\n\nBuild a fixed single-line function with documentation comments\n\n\n\n\nType\nDetails\n\n\n\n\nparsed\ndict\nParsed signature components\n\n\nparams\nList\nIndividual parameter strings\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nList\nLines of fixed function signature\n\n\n\n\n\n\nfix_multi_line_signature\n\n fix_multi_line_signature (lines:List[str], def_line_idx:int,\n                           sig_end_idx:int, result:cjm_nbdev_docments.core\n                           .DocmentsCheckResult)\n\nFix a multi-line function signature by adding parameter comments\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nList\nAll source lines\n\n\ndef_line_idx\nint\nStart of function definition\n\n\nsig_end_idx\nint\nEnd of function signature\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nList\nFixed lines for the signature portion\n\n\n\n\n\n\nfix_class_definition\n\n fix_class_definition (result:cjm_nbdev_docments.core.DocmentsCheckResult)\n\nFix a class definition by adding a docstring if missing\n\n\n\n\nType\nDetails\n\n\n\n\nresult\nDocmentsCheckResult\nCheck result with non-compliant class\n\n\nReturns\nstr\nFixed source code with class docstring\n\n\n\n\n\n\ninsert_function_docstring\n\n insert_function_docstring (lines:List[str], def_line_idx:int, indent:str)\n\nInsert a TODO docstring after the function signature\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nList\nFixed function lines\n\n\ndef_line_idx\nint\nIndex of function definition line\n\n\nindent\nstr\nBase indentation for the function\n\n\nReturns\nList\nLines with docstring inserted\n\n\n\n\n\n\nfix_single_line_function\n\n fix_single_line_function (lines:List[str], def_line_idx:int,\n                           result:cjm_nbdev_docments.core.DocmentsCheckRes\n                           ult)\n\nFix a single-line function signature by converting to multi-line with parameter comments\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nList\nAll source lines\n\n\ndef_line_idx\nint\nIndex of function definition line\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nList\nFixed lines for the function\n\n\n\n\n\n\nfix_multi_line_function\n\n fix_multi_line_function (lines:List[str], def_line_idx:int,\n                          sig_end_idx:int, result:cjm_nbdev_docments.core.\n                          DocmentsCheckResult)\n\nFix a multi-line function signature by adding parameter comments\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nList\nAll source lines\n\n\ndef_line_idx\nint\nStart of function definition\n\n\nsig_end_idx\nint\nEnd of function signature\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nList\nFixed lines for the function\n\n\n\n\n\n\ngenerate_fixed_source\n\n generate_fixed_source\n                        (result:cjm_nbdev_docments.core.DocmentsCheckResul\n                        t)\n\nGenerate fixed source code for a non-compliant function or class\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nresult\nDocmentsCheckResult\nCheck result with non-compliant function\n\n\nReturns\nstr\nFixed source code with placeholder documentation\n\n\n\n\n\n\nfix_notebook\n\n fix_notebook (nb_path:pathlib.Path, dry_run:bool=False)\n\nFix non-compliant functions in a notebook by adding placeholder documentation\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnb_path\nPath\n\nPath to notebook to fix\n\n\ndry_run\nbool\nFalse\nIf True, show changes without saving\n\n\nReturns\nDict\n\nSummary of changes made\n\n\n\n\n\n\nDocstringInfo\n\n DocstringInfo (description:str, params:Dict[str,str],\n                returns:Optional[str], docstring_type:str)\n\nInformation extracted from a docstring\n\n\n\ndetect_docstring_style\n\n detect_docstring_style (docstring:str)\n\nDetect the style of a docstring\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndocstring\nstr\nDocstring text to analyze\n\n\nReturns\nstr\nDetected style: ‘google’, ‘numpy’, ‘sphinx’, ‘docments’, or ‘unknown’\n\n\n\n\n\n\nparse_google_docstring\n\n parse_google_docstring (docstring:str)\n\nParse a Google-style docstring\n\n\n\n\nType\nDetails\n\n\n\n\ndocstring\nstr\nGoogle-style docstring text\n\n\nReturns\nDocstringInfo\nParsed docstring information\n\n\n\n\n\n\nparse_numpy_docstring\n\n parse_numpy_docstring (docstring:str)\n\nParse a NumPy-style docstring\n\n\n\n\nType\nDetails\n\n\n\n\ndocstring\nstr\nNumPy-style docstring text\n\n\nReturns\nDocstringInfo\nParsed docstring information\n\n\n\n\n\n\nparse_sphinx_docstring\n\n parse_sphinx_docstring (docstring:str)\n\nParse a Sphinx-style docstring\n\n\n\n\nType\nDetails\n\n\n\n\ndocstring\nstr\nSphinx-style docstring text\n\n\nReturns\nDocstringInfo\nParsed docstring information\n\n\n\n\n\n\nextract_docstring_info\n\n extract_docstring_info (source:str, name:str)\n\nExtract docstring information from function source code\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nFunction source code\n\n\nname\nstr\nFunction name\n\n\nReturns\nOptional\nExtracted docstring information or None\n\n\n\n\n\n\nconvert_to_docments_format\n\n convert_to_docments_format (source:str,\n                             docstring_info:__main__.DocstringInfo, result\n                             :cjm_nbdev_docments.core.DocmentsCheckResult)\n\nConvert function source to docments format using extracted docstring info\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nOriginal function source code\n\n\ndocstring_info\nDocstringInfo\nExtracted docstring information\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nstr\nConverted source code in docments format\n\n\n\n\n\n\nconvert_single_line_to_docments\n\n convert_single_line_to_docments (sig_line:str,\n                                  docstring_info:__main__.DocstringInfo, r\n                                  esult:cjm_nbdev_docments.core.DocmentsCh\n                                  eckResult)\n\nConvert single-line function signature to multi-line docments format\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsig_line\nstr\nSingle-line function signature\n\n\ndocstring_info\nDocstringInfo\nExtracted docstring information\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nList\nMulti-line signature with docments comments\n\n\n\n\n\n\nconvert_multiline_to_docments\n\n convert_multiline_to_docments (sig_lines:List[str],\n                                docstring_info:__main__.DocstringInfo, res\n                                ult:cjm_nbdev_docments.core.DocmentsCheckR\n                                esult)\n\nConvert multi-line function signature to docments format\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsig_lines\nList\nMulti-line function signature\n\n\ndocstring_info\nDocstringInfo\nExtracted docstring information\n\n\nresult\nDocmentsCheckResult\nCheck result with missing params info\n\n\nReturns\nList\nMulti-line signature with docments comments\n\n\n\n\n\n\nreplace_docstring_in_body\n\n replace_docstring_in_body (body_lines:List[str], description:str,\n                            def_line:str)\n\nReplace the docstring in function body with a simple description\n\n\n\n\nType\nDetails\n\n\n\n\nbody_lines\nList\nFunction body lines\n\n\ndescription\nstr\nNew description to use\n\n\ndef_line\nstr\nFunction definition line for indentation\n\n\nReturns\nList\nModified body lines\n\n\n\n\n\n\ngenerate_fixed_source_with_conversion\n\n generate_fixed_source_with_conversion\n                                        (result:cjm_nbdev_docments.core.Do\n                                        cmentsCheckResult)\n\nGenerate fixed source code, converting existing docstrings to docments format if possible\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nresult\nDocmentsCheckResult\nCheck result with non-compliant function\n\n\nReturns\nstr\nFixed source code with converted documentation\n\n\n\n\n\n\nfix_notebook_with_conversion\n\n fix_notebook_with_conversion (nb_path:pathlib.Path, dry_run:bool=False,\n                               convert_docstrings:bool=True)\n\nFix non-compliant functions in a notebook, optionally converting docstrings to docments format\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnb_path\nPath\n\nPath to notebook to fix\n\n\ndry_run\nbool\nFalse\nIf True, show changes without saving\n\n\nconvert_docstrings\nbool\nTrue\nIf True, convert existing docstrings to docments format\n\n\nReturns\nDict\n\nSummary of changes made\n\n\n\n\n\nTesting\n\ndef test_docstring_detection_and_parsing():\n    \"\"\"Test docstring style detection and parsing for all supported formats\"\"\"\n    print(\"🧪 Testing Docstring Detection and Parsing\")\n    print(\"=\" * 50)\n    \n    # Test docstrings for different styles\n    test_docstrings = [\n        # Google style\n        ('google', '''\"\"\"Calculate the sum of two numbers.\n        \n        Args:\n            x (int): The first number to add\n            y (int): The second number to add\n            \n        Returns:\n            int: The sum of x and y\n        \"\"\"'''),\n        \n        # NumPy style  \n        ('numpy', '''\"\"\"Calculate the sum of two numbers.\n        \n        Parameters\n        ----------\n        x : int\n            The first number to add\n        y : int  \n            The second number to add\n            \n        Returns\n        -------\n        int\n            The sum of x and y\n        \"\"\"'''),\n        \n        # Sphinx style\n        ('sphinx', '''\"\"\"Calculate the sum of two numbers.\n        \n        :param x: The first number to add\n        :param y: The second number to add\n        :returns: The sum of x and y\n        \"\"\"'''),\n        \n        # Unknown style\n        ('unknown', '''\"\"\"Just a simple description without structured parameters.\"\"\"''')\n    ]\n    \n    # Test detection\n    print(\"📋 Style Detection Results:\")\n    for expected_style, docstring in test_docstrings:\n        detected_style = detect_docstring_style(docstring)\n        status = \"✅\" if detected_style == expected_style else \"❌\"\n        print(f\"{status} {expected_style.title()}: {detected_style}\")\n    \n    # Test parsing for structured formats\n    print(\"\\n📖 Parsing Results:\")\n    for style_name, docstring in test_docstrings[:3]:  # Skip unknown style\n        if style_name == 'google':\n            parsed = parse_google_docstring(docstring)\n        elif style_name == 'numpy':\n            parsed = parse_numpy_docstring(docstring)\n        elif style_name == 'sphinx':\n            parsed = parse_sphinx_docstring(docstring)\n        \n        print(f\"\\n{style_name.title()} parsing:\")\n        print(f\"  Description: {parsed.description}\")\n        print(f\"  Parameters: {list(parsed.params.keys())}\")\n        print(f\"  Returns: {'Yes' if parsed.returns else 'No'}\")\n    \n    print(\"\\n✅ Docstring detection and parsing tests completed\")\n\n# Run test\ntest_docstring_detection_and_parsing()\n\n🧪 Testing Docstring Detection and Parsing\n==================================================\n📋 Style Detection Results:\n✅ Google: google\n✅ Numpy: numpy\n✅ Sphinx: sphinx\n✅ Unknown: unknown\n\n📖 Parsing Results:\n\nGoogle parsing:\n  Description: Calculate the sum of two numbers.\n  Parameters: ['x', 'y']\n  Returns: Yes\n\nNumpy parsing:\n  Description: Calculate the sum of two numbers.\n  Parameters: ['x', 'y']\n  Returns: Yes\n\nSphinx parsing:\n  Description: \"\"\"Calculate the sum of two numbers. \"\"\"\n  Parameters: ['x', 'y']\n  Returns: Yes\n\n✅ Docstring detection and parsing tests completed\n\n\n\ndef test_function_fixing():\n    \"\"\"Test basic function fixing for various scenarios\"\"\"\n    print(\"\\n🔧 Testing Function Fixing\")\n    print(\"=\" * 50)\n    \n    # Test cases with different compliance issues\n    test_cases = [\n        {\n            'name': 'missing_all_docs',\n            'source': '''def bad_function(x, y, z=10):\n    result = x + y + z\n    return result''',\n            'args': [\n                {'name': 'x', 'annotation': None},\n                {'name': 'y', 'annotation': None},\n                {'name': 'z', 'annotation': None}\n            ],\n            'returns': None,\n            'description': 'Missing all documentation and type hints'\n        },\n        {\n            'name': 'typed_function',\n            'source': '''def typed_function(name: str, age: int) -&gt; str:\n    return f\"{name} is {age} years old\"''',\n            'args': [\n                {'name': 'name', 'annotation': 'str'},\n                {'name': 'age', 'annotation': 'int'}\n            ],\n            'returns': 'str',\n            'description': 'Has type hints but missing parameter documentation'\n        },\n        {\n            'name': 'partially_documented',\n            'source': '''def get_export_cells(\n    nb_path: Path,  # Path to the notebook file\n    fake_test_path: Path \n) -&gt; List[Dict[str, Any]]:  # List of cells with export directives\n    \"\"\"Extract all code cells from a notebook that have export directives\"\"\"\n    nb = read_nb(nb_path)\n    return []''',\n            'args': [\n                {'name': 'nb_path', 'annotation': 'Path'},\n                {'name': 'fake_test_path', 'annotation': 'Path'}\n            ],\n            'returns': 'List[Dict[str, Any]]',\n            'description': 'Partially documented - missing one parameter doc'\n        }\n    ]\n    \n    for test_case in test_cases:\n        print(f\"\\n📝 Testing: {test_case['description']}\")\n        print(f\"Function: {test_case['name']}\")\n\n        print(f\"\\nSource:\\n{test_case['source']}\\n\")\n        \n        # Create test definition\n        test_def = {\n            'name': test_case['name'],\n            'type': 'FunctionDef',\n            'source': test_case['source'],\n            'notebook': 'test.ipynb',\n            'args': test_case['args'],\n            'returns': test_case['returns']\n        }\n        \n        # Check compliance\n        result = check_definition(test_def)\n        print(f\"Has docstring: {result.has_docstring}\")\n        print(f\"Is compliant: {result.is_compliant}\")\n        if not result.is_compliant:\n            print(f\"Missing: {result.missing_params}\")\n            \n            # Apply fix\n            fixed_source = generate_fixed_source(result)\n            print(f\"\\nFixed Source:\\n{fixed_source}\\n\")\n    \n    print(\"\\n✅ Function fixing tests completed\")\n\n# Run test\ntest_function_fixing()\n\n\n🔧 Testing Function Fixing\n==================================================\n\n📝 Testing: Missing all documentation and type hints\nFunction: missing_all_docs\n\nSource:\ndef bad_function(x, y, z=10):\n    result = x + y + z\n    return result\n\nHas docstring: False\nIs compliant: False\nMissing: ['x', 'y', 'z']\n\nFixed Source:\ndef bad_function(\n    x,  # TODO: Add type hint and description\n    y,  # TODO: Add type hint and description\n    z=10  # TODO: Add type hint and description\n):\n    \"\"\"TODO: Add function description\"\"\"\n    result = x + y + z\n    return result\n\n\n📝 Testing: Has type hints but missing parameter documentation\nFunction: typed_function\n\nSource:\ndef typed_function(name: str, age: int) -&gt; str:\n    return f\"{name} is {age} years old\"\n\nHas docstring: False\nIs compliant: False\nMissing: ['name', 'age', 'return']\n\nFixed Source:\ndef typed_function(\n    name: str,  # TODO: Add description\n    age: int  # TODO: Add description\n) -&gt; str:  # TODO: Add return description\n    \"\"\"TODO: Add function description\"\"\"\n    return f\"{name} is {age} years old\"\n\n\n📝 Testing: Partially documented - missing one parameter doc\nFunction: partially_documented\n\nSource:\ndef get_export_cells(\n    nb_path: Path,  # Path to the notebook file\n    fake_test_path: Path \n) -&gt; List[Dict[str, Any]]:  # List of cells with export directives\n    \"\"\"Extract all code cells from a notebook that have export directives\"\"\"\n    nb = read_nb(nb_path)\n    return []\n\nHas docstring: False\nIs compliant: False\nMissing: ['fake_test_path']\n\nFixed Source:\ndef get_export_cells(\n    nb_path: Path,  # Path to the notebook file\n    fake_test_path: Path   # TODO: Add description\n) -&gt; List[Dict[str, Any]]:  # List of cells with export directives\n    \"\"\"Extract all code cells from a notebook that have export directives\"\"\"\n    nb = read_nb(nb_path)\n    return []\n\n\n✅ Function fixing tests completed\n\n\n\ndef test_docstring_conversion():\n    \"\"\"Test conversion from various docstring formats to docments style\"\"\"\n    print(\"\\n🔄 Testing Docstring Conversion\")\n    print(\"=\" * 50)\n    \n    # Test functions with different docstring formats\n    test_functions = [\n        {\n            'name': 'google_example',\n            'source': '''def google_example(name: str, age: int, active: bool = True) -&gt; str:\n    \"\"\"Generate a user profile string.\n    \n    Args:\n        name (str): The user's full name\n        age (int): The user's age in years\n        active (bool): Whether the user is currently active\n        \n    Returns:\n        str: A formatted profile string\n    \"\"\"\n    return f\"{name} ({age}) - {'Active' if active else 'Inactive'}\"''',\n            'args': [\n                {'name': 'name', 'annotation': 'str'},\n                {'name': 'age', 'annotation': 'int'},\n                {'name': 'active', 'annotation': 'bool'}\n            ],\n            'returns': 'str',\n            'style': 'Google'\n        },\n        {\n            'name': 'numpy_example',\n            'source': '''def numpy_example(data: list, threshold: float = 0.5) -&gt; dict:\n    \"\"\"Process data based on threshold.\n    \n    Parameters\n    ----------\n    data : list\n        Input data to process\n    threshold : float\n        Minimum threshold value\n        \n    Returns\n    -------\n    dict\n        Processing results with statistics\n    \"\"\"\n    return {'processed': len(data), 'threshold': threshold}''',\n            'args': [\n                {'name': 'data', 'annotation': 'list'},\n                {'name': 'threshold', 'annotation': 'float'}\n            ],\n            'returns': 'dict',\n            'style': 'NumPy'\n        }\n    ]\n    \n    for func_info in test_functions:\n        print(f\"\\n📝 Testing {func_info['style']} Style Conversion\")\n        print(f\"Function: {func_info['name']}\")\n\n        print(f\"\\nSource:\\n{func_info['source']}\\n\")\n        \n        # Create test definition\n        test_def = {\n            'name': func_info['name'],\n            'type': 'FunctionDef',\n            'source': func_info['source'],\n            'notebook': 'test.ipynb',\n            'args': func_info['args'],\n            'returns': func_info['returns']\n        }\n        \n        # Check original compliance\n        result = check_definition(test_def)\n        \n        \n        # Extract and verify docstring info\n        docstring_info = extract_docstring_info(result.source, result.name)\n        if docstring_info:\n            print(f\"Docstring type: {docstring_info.docstring_type}\")\n            print(f\"Parameters found: {list(docstring_info.params.keys())}\")\n            print(f\"Return info: {'Yes' if docstring_info.returns else 'No'}\")\n        \n        # Convert to docments format\n        converted = generate_fixed_source_with_conversion(result)\n        print(f\"\\nConverted Source:\\n{converted}\\n\")\n        \n        # Verify converted version is compliant\n        test_def_converted = test_def.copy()\n        test_def_converted['source'] = converted\n        result_converted = check_definition(test_def_converted)\n    \n    print(\"\\n✅ Docstring conversion tests completed\")\n\n# Run test\ntest_docstring_conversion()\n\n\n🔄 Testing Docstring Conversion\n==================================================\n\n📝 Testing Google Style Conversion\nFunction: google_example\n\nSource:\ndef google_example(name: str, age: int, active: bool = True) -&gt; str:\n    \"\"\"Generate a user profile string.\n\n    Args:\n        name (str): The user's full name\n        age (int): The user's age in years\n        active (bool): Whether the user is currently active\n\n    Returns:\n        str: A formatted profile string\n    \"\"\"\n    return f\"{name} ({age}) - {'Active' if active else 'Inactive'}\"\n\nDocstring type: google\nParameters found: ['name', 'age', 'active']\nReturn info: Yes\n\nConverted Source:\ndef google_example(\n    name: str,  # The user's full name\n    age: int,  # The user's age in years\n    active: bool = True  # Whether the user is currently active\n) -&gt; str:  # str: A formatted profile string\n    \"\"\"Generate a user profile string.\"\"\"\n    return f\"{name} ({age}) - {'Active' if active else 'Inactive'}\"\n\n\n📝 Testing NumPy Style Conversion\nFunction: numpy_example\n\nSource:\ndef numpy_example(data: list, threshold: float = 0.5) -&gt; dict:\n    \"\"\"Process data based on threshold.\n\n    Parameters\n    ----------\n    data : list\n        Input data to process\n    threshold : float\n        Minimum threshold value\n\n    Returns\n    -------\n    dict\n        Processing results with statistics\n    \"\"\"\n    return {'processed': len(data), 'threshold': threshold}\n\nDocstring type: numpy\nParameters found: ['data', 'threshold']\nReturn info: Yes\n\nConverted Source:\ndef numpy_example(\n    data: list,  # Input data to process\n    threshold: float = 0.5  # Minimum threshold value\n) -&gt; dict:  # dict Processing results with statistics\n    \"\"\"Process data based on threshold.\"\"\"\n    return {'processed': len(data), 'threshold': threshold}\n\n\n✅ Docstring conversion tests completed",
    "crumbs": [
      "Auto-Fix"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Core",
    "section": "",
    "text": "source\n\nDocmentsCheckResult\n\n DocmentsCheckResult (name:str, type:str, notebook:str,\n                      has_docstring:bool,\n                      params_documented:Dict[str,bool],\n                      return_documented:bool, missing_params:List[str],\n                      is_compliant:bool, source:str, has_todos:bool=False,\n                      todo_count:int=0,\n                      params_with_type_hints:Dict[str,bool]=None,\n                      return_has_type_hint:bool=False,\n                      params_missing_type_hints:List[str]=None)\n\nResult of checking a function/class for docments compliance\n\nsource\n\n\nextract_param_docs_from_func\n\n extract_param_docs_from_func (func:Callable)\n\nExtract parameter documentation from function object using fastcore.docments\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfunc\nCallable\nFunction object to extract docs from\n\n\nReturns\nDict\nMapping of parameter names to their documentation\n\n\n\n\nsource\n\n\nextract_param_docs\n\n extract_param_docs (source:str)\n\nExtract parameter documentation from function source using docments style (fallback)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nFunction source code\n\n\nReturns\nDict\nMapping of parameter names to their documentation\n\n\n\n\nsource\n\n\ncheck_return_doc\n\n check_return_doc (source:str)\n\nCheck if function has return documentation\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nFunction source code\n\n\nReturns\nbool\nWhether return is documented\n\n\n\n\nsource\n\n\ncount_todos_in_docs\n\n count_todos_in_docs (source:str, name:str)\n\nCount TODO placeholders only in documentation (docstring, param docs, return docs)\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nFunction/class source code\n\n\nname\nstr\nName of the function/class for AST parsing\n\n\nReturns\nTuple\n(todo_count, has_todos)\n\n\n\n\nsource\n\n\ncheck_has_docstring_from_func\n\n check_has_docstring_from_func (func:Callable)\n\nCheck if a function has a docstring using fastcore.docments\n\n\n\n\nType\nDetails\n\n\n\n\nfunc\nCallable\nFunction object to check\n\n\nReturns\nbool\nWhether the function has a docstring\n\n\n\n\nsource\n\n\ncheck_has_docstring\n\n check_has_docstring (source:str, name:str)\n\nCheck if a function/class has a docstring using AST parsing (fallback)\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nFunction/class source code\n\n\nname\nstr\nName of the function/class\n\n\nReturns\nbool\nWhether the definition has a docstring\n\n\n\n\nsource\n\n\nfunction_has_return_value\n\n function_has_return_value (source:str, name:str)\n\nCheck if a function actually returns a value (not just implicit None)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nFunction source code\n\n\nname\nstr\nFunction name\n\n\nReturns\nbool\nWhether function has explicit return statements with values\n\n\n\n\nsource\n\n\ncheck_type_hints\n\n check_type_hints (definition:Dict[str,Any], source:Optional[str]=None)\n\nCheck which parameters and return value have type hints\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndefinition\nDict\n\nDefinition dict from scanner\n\n\nsource\nOptional\nNone\nFunction source code (optional)\n\n\nReturns\nTuple\n\n(params_with_type_hints, missing_type_hints, return_has_type_hint)\n\n\n\n\nsource\n\n\ncheck_params_documentation\n\n check_params_documentation (definition:Dict[str,Any], source:str)\n\nCheck parameter and return documentation for a function\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndefinition\nDict\nDefinition dict from scanner\n\n\nsource\nstr\nFunction source code\n\n\nReturns\nTuple\n(params_documented, missing_params, return_documented)\n\n\n\n\nsource\n\n\ndetermine_compliance\n\n determine_compliance (has_docstring:bool,\n                       params_documented:Dict[str,bool],\n                       return_documented:bool)\n\nDetermine if a definition is compliant based on documentation checks\n\n\n\n\nType\nDetails\n\n\n\n\nhas_docstring\nbool\nWhether definition has a docstring\n\n\nparams_documented\nDict\nWhich params have documentation\n\n\nreturn_documented\nbool\nWhether return is documented\n\n\nReturns\nbool\nOverall compliance status\n\n\n\n\nsource\n\n\ncheck_definition\n\n check_definition (definition:Dict[str,Any])\n\nCheck a function/class definition for docments compliance\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndefinition\nDict\nDefinition dict from scanner\n\n\nReturns\nDocmentsCheckResult\nCheck result with compliance details\n\n\n\n\nsource\n\n\ncheck_notebook\n\n check_notebook (nb_path:str)\n\nCheck a specific notebook for docments compliance\n\n\n\n\nType\nDetails\n\n\n\n\nnb_path\nstr\nPath to notebook file\n\n\nReturns\nNone\nPrints compliance report\n\n\n\n\nsource\n\n\ncheck_function\n\n check_function (func:Callable)\n\nCheck a single function for docments compliance\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nfunc\nCallable\nFunction object to check\n\n\nReturns\nDocmentsCheckResult\nCheck result for the function\n\n\n\n\n# Test checking a specific notebook\ncheck_notebook(\"core.ipynb\")\n\nChecking core.ipynb:\n📚 Docments Compliance Report\n==================================================\nTotal definitions: 15\n✅ Compliant: 15\n❌ Non-compliant: 0\n\n\n✅ Compliant definitions:\n------------------------------\n\n📓 core.ipynb:\n  ✅ DocmentsCheckResult\n  ✅ __post_init__\n  ✅ extract_param_docs_from_func\n  ✅ extract_param_docs\n  ✅ check_return_doc\n  ✅ count_todos_in_docs\n  ✅ check_has_docstring_from_func\n  ✅ check_has_docstring\n  ✅ function_has_return_value\n  ✅ check_type_hints\n  ✅ check_params_documentation\n  ✅ determine_compliance\n  ✅ check_definition\n  ✅ check_notebook\n  ✅ check_function\n\n\n\n# Test checking a function directly\ndef test_func(\n    x: int,  # First number\n    y: int = 0  # Second number  \n) -&gt; int:  # Sum of x and y\n    \"Add two numbers\"\n    return x + y\n\ncheck_function(test_func)\n\n✅ test_func is compliant\n\n\nDocmentsCheckResult(name='test_func', type='FunctionDef', notebook='runtime', has_docstring=True, params_documented={'x': True, 'y': True}, return_documented=True, missing_params=[], is_compliant=True, source='def test_func(\\n    x: int,  # First number\\n    y: int = 0  # Second number  \\n) -&gt; int:  # Sum of x and y\\n    \"Add two numbers\"\\n    return x + y\\n', has_todos=False, todo_count=0, params_with_type_hints={'x': True, 'y': True}, return_has_type_hint=True, params_missing_type_hints=[])\n\n\n\n# Test with a non-compliant function\ndef bad_func(x, y):\n    return x + y\n\ncheck_function(bad_func)\n\n❌ bad_func is not compliant\n   - Missing docstring\n   - Missing docs for: x, y\n   - Missing type hints for: x, y\n   - Missing return type hint\n\n\nDocmentsCheckResult(name='bad_func', type='FunctionDef', notebook='runtime', has_docstring=False, params_documented={'x': False, 'y': False}, return_documented=True, missing_params=['x', 'y'], is_compliant=False, source='def bad_func(x, y):\\n    return x + y\\n', has_todos=False, todo_count=0, params_with_type_hints={'x': False, 'y': False}, return_has_type_hint=False, params_missing_type_hints=['x', 'y', 'return'])\n\n\n\n# Test functions with and without return values\ntest_no_return = '''def function_no_return(x, y):\n    \"Print the sum but don't return anything\"\n    print(x + y)'''\n\ntest_explicit_none = '''def function_explicit_none(x, y):\n    \"Explicitly return None\"\n    print(x + y)\n    return None'''\n\ntest_has_return = '''def function_has_return(x, y):\n    \"Return the sum\"\n    return x + y'''\n\ntest_conditional_return = '''def function_conditional_return(x, y):\n    \"Sometimes return a value\"\n    if x &gt; 0:\n        return x + y\n    # Implicit None return when x &lt;= 0'''\n\nfor source in [test_no_return, test_explicit_none, test_has_return, test_conditional_return]:\n    # Extract function name from source\n    import re\n    name_match = re.search(r'def\\s+(\\w+)', source)\n    if name_match:\n        func_name = name_match.group(1)\n        \n        test_def = {\n            'name': func_name,\n            'type': 'FunctionDef',\n            'source': source,\n            'notebook': 'test.ipynb',\n            'args': [{'name': 'x', 'annotation': None}, {'name': 'y', 'annotation': None}],\n            'returns': None  # No return type annotation\n        }\n        \n        result = check_definition(test_def)\n        has_return = function_has_return_value(source, func_name)\n        \n        print(f\"{func_name}:\")\n        print(f\"  Has return value: {has_return}\")\n        print(f\"  Missing type hints: {result.params_missing_type_hints}\")\n        print(f\"  'return' in missing hints: {'return' in result.params_missing_type_hints}\")\n        print()\n\nfunction_no_return:\n  Has return value: False\n  Missing type hints: ['x', 'y']\n  'return' in missing hints: False\n\nfunction_explicit_none:\n  Has return value: False\n  Missing type hints: ['x', 'y']\n  'return' in missing hints: False\n\nfunction_has_return:\n  Has return value: True\n  Missing type hints: ['x', 'y', 'return']\n  'return' in missing hints: True\n\nfunction_conditional_return:\n  Has return value: True\n  Missing type hints: ['x', 'y', 'return']\n  'return' in missing hints: True\n\n\n\n\n# Test refined TODO detection\ntest_cases = [\n    # Case 1: TODOs only in documentation (should count)\n    '''def func_with_doc_todos(\n    x: int,  # TODO: Add description\n    y: str  # TODO: Add description  \n) -&gt; bool:  # TODO: Add return description\n    \"TODO: Add function description\"\n    return True''',\n    \n    # Case 2: TODOs in function body but not docs (should NOT count)\n    '''def func_with_code_todos(\n    x: int,  # Parameter x\n    y: str  # Parameter y\n) -&gt; bool:  # Returns boolean\n    \"Function with proper docs\"\n    # TODO: Implement this feature later\n    todo_list = [\"item1\", \"item2\"]  # Variable named todo\n    return True''',\n    \n    # Case 3: Mixed TODOs (should only count doc ones)\n    '''def mixed_todos(\n    x: int  # TODO: Add description\n) -&gt; bool:\n    \"Proper function description\"\n    # TODO: Refactor this code\n    todo_items = []\n    return True'''\n]\n\nfor i, source in enumerate(test_cases, 1):\n    test_def = {\n        'name': f'test_func_{i}',\n        'type': 'FunctionDef',\n        'source': source,\n        'notebook': 'test.ipynb',\n        'args': [{'name': 'x', 'annotation': 'int'}],\n        'returns': 'bool'\n    }\n    \n    result = check_definition(test_def)\n    print(f\"Case {i}: {result.name}\")\n    print(f\"  TODO count: {result.todo_count}\")\n    print(f\"  Has TODOs: {result.has_todos}\")\n    print(f\"  Compliant: {result.is_compliant}\")\n    print()\n\nCase 1: test_func_1\n  TODO count: 3\n  Has TODOs: True\n  Compliant: False\n\nCase 2: test_func_2\n  TODO count: 0\n  Has TODOs: False\n  Compliant: False\n\nCase 3: test_func_3\n  TODO count: 1\n  Has TODOs: True\n  Compliant: False",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "scanner.html",
    "href": "scanner.html",
    "title": "Scanner",
    "section": "",
    "text": "source\n\nget_export_cells\n\n get_export_cells (nb_path:pathlib.Path)\n\nExtract all code cells from a notebook that have export directives\n\n\n\n\nType\nDetails\n\n\n\n\nnb_path\nPath\nPath to the notebook file\n\n\nReturns\nList\nList of cells with export directives\n\n\n\n\nsource\n\n\nextract_definitions\n\n extract_definitions (source:str)\n\nExtract function and class definitions from source code\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nsource\nstr\nPython source code\n\n\nReturns\nList\nList of function/class definitions with metadata\n\n\n\n\nsource\n\n\nscan_notebook\n\n scan_notebook (nb_path:pathlib.Path,\n                nbs_root:Optional[pathlib.Path]=None)\n\nScan a notebook and extract all exported function/class definitions\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnb_path\nPath\n\nPath to the notebook to scan\n\n\nnbs_root\nOptional\nNone\nRoot notebooks directory (for relative paths)\n\n\nReturns\nList\n\nList of exported definitions with metadata\n\n\n\n\nsource\n\n\nscan_project\n\n scan_project (nbs_path:Optional[pathlib.Path]=None,\n               pattern:str='*.ipynb')\n\nScan all notebooks in a project for exported definitions\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nnbs_path\nOptional\nNone\nPath to notebooks directory (defaults to config.nbs_path)\n\n\npattern\nstr\n*.ipynb\nPattern for notebook files to scan\n\n\nReturns\nList\n\nAll exported definitions found in the project\n\n\n\n\n# Test scanning this project\ndefinitions = scan_project()\nprint(f\"Found {len(definitions)} exported definitions\")\nfor defn in definitions[:5]:  # Show first 5\n    print(f\"- {defn['type']}: {defn['name']} in {defn['notebook']}\")\n\nFound 59 exported definitions\n- FunctionDef: create_parser in cli.ipynb\n- FunctionDef: handle_autofix in cli.ipynb\n- FunctionDef: generate_report in cli.ipynb\n- FunctionDef: output_report in cli.ipynb\n- FunctionDef: main in cli.ipynb\n\n\n\n# Test if nested folders would be detected\nimport tempfile\nimport shutil\nfrom pathlib import Path\n\n# Create a temporary directory structure to test nested scanning\nwith tempfile.TemporaryDirectory() as tmpdir:\n    tmp_path = Path(tmpdir)\n    \n    # Create nested structure\n    (tmp_path / \"actions\").mkdir()\n    (tmp_path / \"data_display\").mkdir()\n    \n    # Create dummy notebooks\n    dummy_nb = {\n        \"cells\": [\n            {\"cell_type\": \"code\", \"source\": \"#| export\\ndef test_func(): pass\", \"id\": \"cell-1\"}\n        ],\n        \"metadata\": {},\n        \"nbformat\": 4,\n        \"nbformat_minor\": 5\n    }\n    \n    import json\n    \n    # Create notebooks in root\n    with open(tmp_path / \"index.ipynb\", \"w\") as f:\n        json.dump(dummy_nb, f)\n    \n    # Create notebooks in subdirectories\n    with open(tmp_path / \"actions\" / \"button.ipynb\", \"w\") as f:\n        json.dump(dummy_nb, f)\n    \n    with open(tmp_path / \"data_display\" / \"table.ipynb\", \"w\") as f:\n        json.dump(dummy_nb, f)\n    \n    # Test scanning\n    print(\"Testing nested folder scanning:\")\n    notebooks = list(tmp_path.rglob(\"*.ipynb\"))\n    print(f\"Created {len(notebooks)} test notebooks:\")\n    for nb in sorted(notebooks):\n        print(f\"  - {nb.relative_to(tmp_path)}\")\n    \n    # Test scan_project with nested folders\n    definitions = scan_project(nbs_path=tmp_path)\n    print(f\"\\nscan_project found {len(definitions)} definitions\")\n    for defn in definitions:\n        print(f\"  - {defn['name']} in {defn['notebook']}\")\n\nTesting nested folder scanning:\nCreated 3 test notebooks:\n  - actions/button.ipynb\n  - data_display/table.ipynb\n  - index.ipynb\n\nscan_project found 3 definitions\n  - test_func in index.ipynb\n  - test_func in data_display/table.ipynb\n  - test_func in actions/button.ipynb\n\n\n\n# Debug: Check what notebooks we're finding (including nested folders)\nfrom nbdev.config import get_config\ncfg = get_config()\nnbs_path = Path(cfg.config_path) / cfg.nbs_path\nnotebooks = list(nbs_path.rglob(\"*.ipynb\"))\nprint(f\"Looking in: {nbs_path}\")\nprint(f\"Found {len(notebooks)} notebooks (including nested):\")\nfor nb in sorted(notebooks):\n    if not nb.name.startswith('_') and '.ipynb_checkpoints' not in str(nb):\n        relative_path = nb.relative_to(nbs_path)\n        print(f\"  - {relative_path}\")\n        cells = get_export_cells(nb)\n        if cells:\n            print(f\"    Export cells: {len(cells)}\")\n\nLooking in: /home/runner/work/cjm-nbdev-docments/cjm-nbdev-docments/nbs\nFound 6 notebooks (including nested):\n  - autofix.ipynb\n    Export cells: 29\n  - cli.ipynb\n    Export cells: 6\n  - core.ipynb\n    Export cells: 15\n  - index.ipynb\n  - report.ipynb\n    Export cells: 8\n  - scanner.ipynb\n    Export cells: 5",
    "crumbs": [
      "Scanner"
    ]
  },
  {
    "objectID": "cli.html",
    "href": "cli.html",
    "title": "CLI Interface",
    "section": "",
    "text": "source\n\ncreate_parser\n\n create_parser ()\n\nCreate and configure the argument parser for docments CLI\n\nsource\n\n\nhandle_autofix\n\n handle_autofix (args:argparse.Namespace)\n\nHandle auto-fix mode for non-compliant functions\n\n\n\n\nType\nDetails\n\n\n\n\nargs\nNamespace\nParsed command line arguments\n\n\nReturns\nint\nExit code\n\n\n\n\nsource\n\n\ngenerate_report\n\n generate_report (results:list, format:str, verbose:bool=False)\n\nGenerate a report in the specified format\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nresults\nlist\n\nCheck results from check_project\n\n\nformat\nstr\n\nOutput format (“text” or “json”)\n\n\nverbose\nbool\nFalse\nWhether to show compliant definitions\n\n\nReturns\nstr\n\nGenerated report as string\n\n\n\n\nsource\n\n\noutput_report\n\n output_report (report:str, output_path:Optional[pathlib.Path]=None,\n                quiet:bool=False)\n\nOutput the report to console or file\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nreport\nstr\n\nReport content to output\n\n\noutput_path\nOptional\nNone\nFile path to save report to\n\n\nquiet\nbool\nFalse\nWhether to suppress output\n\n\nReturns\nNone\n\n\n\n\n\n\nsource\n\n\nmain\n\n main (args:Optional[list]=None)\n\nMain CLI entry point for docments checker\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nargs\nOptional\nNone\nCommand line arguments (for testing)\n\n\nReturns\nint\n\nExit code (0 for success, 1 for non-compliance)\n\n\n\n\n# Test the CLI with different options\nprint(\"Basic check:\")\nexit_code = main([])\nprint(f\"\\nExit code: {exit_code}\")\n\nprint(\"\\n\" + \"=\"*50 + \"\\n\")\n\nprint(\"JSON format:\")\nmain([\"--format\", \"json\"])\n\nBasic check:\n📚 Docments Compliance Report\n==================================================\nTotal definitions: 58\n✅ Compliant: 58\n❌ Non-compliant: 0\n⚠️  With TODO placeholders: 5\n\n\n⚠️  Definitions with TODO placeholders:\n------------------------------\n\n📓 03_autofix.ipynb:\n  ⚠️  needs_fixing (1 TODOs)\n  ⚠️  get_param_name (2 TODOs)\n  ⚠️  needs_param_fix (2 TODOs)\n\n📓 04_cli.ipynb:\n  ⚠️  create_parser (1 TODOs)\n  ⚠️  output_report (1 TODOs)\n\nExit code: 0\n\n==================================================\n\nJSON format:\n{\n  \"summary\": {\n    \"total\": 58,\n    \"compliant\": 58,\n    \"non_compliant\": 0,\n    \"with_todos\": 5,\n    \"total_todos\": 7\n  },\n  \"by_notebook\": {\n    \"00_core.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"DocmentsCheckResult\",\n          \"type\": \"ClassDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": false,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"__post_init__\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_param_docs_from_func\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"func\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"func\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_param_docs\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_return_doc\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"count_todos_in_docs\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_has_docstring_from_func\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"func\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"func\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_has_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_type_hints\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"definition\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"definition\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_params_documentation\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"definition\": true,\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"definition\": true,\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"determine_compliance\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"has_docstring\": true,\n            \"params_documented\": true,\n            \"return_documented\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"has_docstring\": true,\n            \"params_documented\": true,\n            \"return_documented\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_definition\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"definition\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"definition\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_notebook\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"check_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"func\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"func\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": []\n    },\n    \"03_autofix.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"needs_fixing\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"get_param_name\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_str\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_str\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"needs_param_fix\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"find_signature_boundaries\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"split_parameters\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"params_str\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"params_str\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_single_line_signature\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"sig_line\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"sig_line\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_param_todo_comment\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_name\": true,\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"param_name\": true,\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_return_todo_comment\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true,\n            \"existing_comment\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"build_fixed_single_line_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"parsed\": true,\n            \"params\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"parsed\": true,\n            \"params\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_multi_line_signature\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_class_definition\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"insert_function_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"indent\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"indent\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_single_line_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_multi_line_function\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"lines\": true,\n            \"def_line_idx\": true,\n            \"sig_end_idx\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_fixed_source\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_notebook\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true,\n            \"dry_run\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true,\n            \"dry_run\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"DocstringInfo\",\n          \"type\": \"ClassDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": false,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"detect_docstring_style\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_google_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_numpy_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"parse_sphinx_docstring\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"docstring\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"docstring\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_docstring_info\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"convert_to_docments_format\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"convert_single_line_to_docments\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"sig_line\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"sig_line\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"convert_multiline_to_docments\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"sig_lines\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"sig_lines\": true,\n            \"docstring_info\": true,\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"replace_docstring_in_body\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"body_lines\": true,\n            \"description\": true,\n            \"def_line\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"body_lines\": true,\n            \"description\": true,\n            \"def_line\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_fixed_source_with_conversion\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"result\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"result\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"fix_notebook_with_conversion\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true,\n            \"dry_run\": true,\n            \"convert_docstrings\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true,\n            \"dry_run\": true,\n            \"convert_docstrings\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": [\n        {\n          \"name\": \"needs_fixing\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"get_param_name\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_str\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_str\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"needs_param_fix\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"param_name\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 2,\n          \"params_with_type_hints\": {\n            \"param_name\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ]\n    },\n    \"01_scanner.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"get_export_cells\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"extract_definitions\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"source\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"source\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"scan_notebook\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nb_path\": true,\n            \"nbs_root\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nb_path\": true,\n            \"nbs_root\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"scan_project\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nbs_path\": true,\n            \"pattern\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nbs_path\": true,\n            \"pattern\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": []\n    },\n    \"04_cli.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"create_parser\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"handle_autofix\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"args\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"args\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"format\": true,\n            \"verbose\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"format\": true,\n            \"verbose\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"output_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"main\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"args\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"args\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": [\n        {\n          \"name\": \"create_parser\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {},\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {},\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"output_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": true,\n          \"todo_count\": 1,\n          \"params_with_type_hints\": {\n            \"report\": true,\n            \"output_path\": true,\n            \"quiet\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ]\n    },\n    \"02_report.ipynb\": {\n      \"compliant\": [\n        {\n          \"name\": \"check_project\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"nbs_path\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"nbs_path\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_summary_stats\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_non_compliant_section\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_todos_section\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"_generate_compliant_section\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"by_notebook\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_text_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true,\n            \"verbose\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true,\n            \"verbose\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        },\n        {\n          \"name\": \"generate_json_report\",\n          \"type\": \"FunctionDef\",\n          \"has_docstring\": true,\n          \"missing_params\": [],\n          \"params_documented\": {\n            \"results\": true\n          },\n          \"return_documented\": true,\n          \"has_todos\": false,\n          \"todo_count\": 0,\n          \"params_with_type_hints\": {\n            \"results\": true\n          },\n          \"return_has_type_hint\": true,\n          \"params_missing_type_hints\": []\n        }\n      ],\n      \"non_compliant\": [],\n      \"with_todos\": []\n    }\n  }\n}\n\n\n0\n\n\n\n# Test the new --convert-docstrings flag\nprint(\"Testing CLI with conversion support:\")\n\n# Test the parser with the new flag\nparser = create_parser()\ntest_args = parser.parse_args([\"--fix\", \"--convert-docstrings\", \"--dry-run\"])\n\nprint(f\"Parsed args:\")\nprint(f\"  fix: {test_args.fix}\")\nprint(f\"  convert_docstrings: {test_args.convert_docstrings}\")\nprint(f\"  dry_run: {test_args.dry_run}\")\n\nprint(\"\\nCLI help text for the new flag:\")\nparser.print_help()\n\nTesting CLI with conversion support:\nParsed args:\n  fix: True\n  convert_docstrings: True\n  dry_run: True\n\nCLI help text for the new flag:\nusage: ipykernel_launcher.py [-h] [--nbs-path NBS_PATH] [--format {text,json}]\n                             [--output OUTPUT] [--verbose] [--quiet]\n                             [--todos-only] [--fix] [--convert-docstrings]\n                             [--dry-run]\n\nCheck nbdev project for docments compliance\n\noptions:\n  -h, --help            show this help message and exit\n  --nbs-path NBS_PATH   Path to notebooks directory (defaults to nbdev config)\n  --format {text,json}  Output format (default: text)\n  --output OUTPUT, -o OUTPUT\n                        Save report to file instead of printing\n  --verbose, -v         Show compliant definitions in text report\n  --quiet, -q           Only show summary (exit code indicates compliance)\n  --todos-only          Show only functions with TODO placeholders\n  --fix                 Auto-fix non-compliant functions by adding placeholder\n                        docs\n  --convert-docstrings  Convert existing Google/NumPy/Sphinx docstrings to\n                        docments format (use with --fix)\n  --dry-run             Show what would be fixed without making changes\n\nExamples:\n  # Check current project\n  nbdev-docments\n\n  # Check specific notebooks directory\n  nbdev-docments --nbs-path ./notebooks\n\n  # Generate JSON report\n  nbdev-docments --format json\n\n  # Save report to file\n  nbdev-docments --output report.txt\n\n  # Show all definitions (including compliant ones)\n  nbdev-docments --verbose\n\n  # Show only functions with TODO placeholders\n  nbdev-docments --todos-only\n\n  # Auto-fix non-compliant functions\n  nbdev-docments --fix\n\n  # Auto-fix with docstring conversion\n  nbdev-docments --fix --convert-docstrings\n\n  # Preview fixes without applying\n  nbdev-docments --fix --dry-run",
    "crumbs": [
      "CLI Interface"
    ]
  }
]